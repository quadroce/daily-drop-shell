-- Create social_posts table for LinkedIn archive shares and other social posting
CREATE TABLE IF NOT EXISTS public.social_posts (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  platform text NOT NULL CHECK (platform IN ('linkedin', 'reddit', 'twitter', 'facebook')),
  kind text NOT NULL CHECK (kind IN ('archive_share', 'highlight', 'digest')),
  topic_id bigint REFERENCES public.topics(id) ON DELETE CASCADE,
  topic_slug text NOT NULL,
  date_key date NOT NULL, -- The date this post is about (e.g., yesterday's archive)
  window_start timestamptz NOT NULL, -- Start of the content selection window
  window_end timestamptz NOT NULL, -- End of the content selection window
  slot_time timestamptz NOT NULL, -- When this post was/should be published
  status text NOT NULL DEFAULT 'queued' CHECK (status IN ('queued', 'processing', 'posted', 'failed', 'skipped')),
  error_message text,
  article_count integer NOT NULL DEFAULT 0,
  external_id text, -- LinkedIn URN or other platform post ID
  post_text text,
  post_url text,
  utm_params jsonb,
  payload_snapshot jsonb,
  created_at timestamptz NOT NULL DEFAULT now(),
  updated_at timestamptz NOT NULL DEFAULT now(),
  posted_at timestamptz
);

-- Indexes for performance
CREATE INDEX idx_social_posts_status_platform ON public.social_posts(status, platform);
CREATE INDEX idx_social_posts_slot_time ON public.social_posts(slot_time DESC);
CREATE INDEX idx_social_posts_topic_date ON public.social_posts(topic_slug, date_key);
CREATE INDEX idx_social_posts_platform_kind ON public.social_posts(platform, kind);

-- Unique constraint to prevent duplicate posts for same topic/date/slot
CREATE UNIQUE INDEX idx_social_posts_unique_slot 
ON public.social_posts(platform, kind, topic_slug, date_key, slot_time)
WHERE status IN ('queued', 'processing', 'posted');

-- RLS policies
ALTER TABLE public.social_posts ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Admins can manage social posts"
ON public.social_posts
FOR ALL
USING (
  EXISTS (
    SELECT 1 FROM profiles
    WHERE id = auth.uid()
    AND role IN ('admin', 'superadmin')
  )
);

-- Create social_post_events table for detailed logging
CREATE TABLE IF NOT EXISTS public.social_post_events (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  post_id bigint REFERENCES public.social_posts(id) ON DELETE CASCADE,
  phase text NOT NULL, -- 'selection', 'composition', 'posting', 'verification'
  status text NOT NULL, -- 'ok', 'warn', 'error'
  message text,
  data jsonb,
  created_at timestamptz DEFAULT now()
);

CREATE INDEX idx_social_post_events_post_id ON public.social_post_events(post_id);
CREATE INDEX idx_social_post_events_created_at ON public.social_post_events(created_at DESC);

-- RLS for events
ALTER TABLE public.social_post_events ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Admins can view social post events"
ON public.social_post_events
FOR SELECT
USING (
  EXISTS (
    SELECT 1 FROM profiles
    WHERE id = auth.uid()
    AND role IN ('admin', 'superadmin')
  )
);

-- Schedule LinkedIn archive shares
-- 12:05 CET/CEST (11:05 UTC in winter, 10:05 UTC in summer)
-- 17:16 CET/CEST (16:16 UTC in winter, 15:16 UTC in summer)
-- Using Europe/Rome timezone in cron
SELECT cron.schedule(
  'linkedin-archive-share-morning',
  '5 11 * * *', -- 12:05 CET (approximately, cron uses server time)
  $$
  SELECT net.http_post(
    url := 'https://qimelntuxquptqqynxzv.supabase.co/functions/v1/linkedin-archive-share',
    headers := '{"Content-Type": "application/json", "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InFpbWVsbnR1eHF1cHRxcXlueHp2Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTY3MTg5ODIsImV4cCI6MjA3MjI5NDk4Mn0.Rt1gvo1wbLKDTtoagWdSOzX0ute2qWbsPtNIgA2bDpQ"}'::jsonb,
    body := '{"slot": "morning", "trigger": "cron"}'::jsonb
  ) as request_id;
  $$
);

SELECT cron.schedule(
  'linkedin-archive-share-afternoon',
  '16 15 * * *', -- 17:16 CET (approximately)
  $$
  SELECT net.http_post(
    url := 'https://qimelntuxquptqqynxzv.supabase.co/functions/v1/linkedin-archive-share',
    headers := '{"Content-Type": "application/json", "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InFpbWVsbnR1eHF1cHRxcXlueHp2Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTY3MTg5ODIsImV4cCI6MjA3MjI5NDk4Mn0.Rt1gvo1wbLKDTtoagWdSOzX0ute2qWbsPtNIgA2bDpQ"}'::jsonb,
    body := '{"slot": "afternoon", "trigger": "cron"}'::jsonb
  ) as request_id;
  $$
);

COMMENT ON TABLE public.social_posts IS 'Stores social media posts across platforms for archive shares, highlights, and digests';
COMMENT ON TABLE public.social_post_events IS 'Detailed event log for social post lifecycle debugging and monitoring';